'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChipSet = exports.ChipIcon = exports.ChipIconRoot = exports.ChipText = exports.Chip = exports.ChipRoot = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Icon = require('../Icon');

var _Base = require('../Base');

var _MDCFoundation = require('../Base/MDCFoundation');

var _mdc = require('@material/chips/dist/mdc.chips');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** A chip component. */
var ChipRoot = exports.ChipRoot = (0, _Base.withRipple)()((0, _Base.simpleTag)({
  displayName: 'ChipRoot',
  classNames: function classNames(props) {
    return ['mdc-chip', {
      'mdc-chip--selected': props.selected
    }];
  },
  consumeProps: ['selected']
}));

var Chip = exports.Chip = function (_withFoundation) {
  _inherits(Chip, _withFoundation);

  function Chip() {
    _classCallCheck(this, Chip);

    return _possibleConstructorReturn(this, (Chip.__proto__ || Object.getPrototypeOf(Chip)).apply(this, arguments));
  }

  _createClass(Chip, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          onInteraction = _props.onInteraction,
          onTrailingIconInteraction = _props.onTrailingIconInteraction,
          apiRef = _props.apiRef,
          rest = _objectWithoutProperties(_props, ['onInteraction', 'onTrailingIconInteraction', 'apiRef']);

      var root_ = this.foundationRefs.root_;

      return React.createElement(ChipRoot, Object.assign({
        tabIndex: 0
      }, rest, {
        elementRef: root_,
        className: (0, _classnames2.default)(this.props.className, [].concat(_toConsumableArray(this.state.classes)))
      }));
    }
  }]);

  return Chip;
}((0, _MDCFoundation.withFoundation)({
  constructor: _mdc.MDCChip,
  adapter: {
    addClass: (0, _MDCFoundation.addClass)(),
    removeClass: (0, _MDCFoundation.removeClass)()
  }
}));

/** Text for a chip. */


Object.defineProperty(Chip, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'Chip'
});
var ChipText = exports.ChipText = (0, _Base.simpleTag)({
  displayName: 'ChipText',
  classNames: 'mdc-chip__text'
});

/** Icons inside of a chip. This is an instance of the Icon component. To make the icons interactive, add props tabIndex="0" and role="button". */
var ChipIconRoot = exports.ChipIconRoot = (0, _Base.simpleTag)({
  displayName: 'ChipIconRoot',
  tag: _Icon.Icon,
  defaultProps: {},
  classNames: function classNames(props) {
    return ['mdc-chip__icon', {
      'mdc-chip__icon--leading': props.leading,
      'mdc-chip__icon--trailing': props.trailing
    }];
  },
  consumeProps: ['trailing', 'leading']
});

var ChipIcon = exports.ChipIcon = function ChipIcon(props) {
  var hasInteractionHandler = Object.keys(props).some(function (p) {
    return p.startsWith('on');
  });
  var trailingProps = props.trailing || hasInteractionHandler ? { role: 'button', tabIndex: 0 } : {};

  return React.createElement(ChipIconRoot, Object.assign({}, trailingProps, props));
};

ChipIcon.displayName = 'ChipIcon';

/** A container for multiple Chip components. */
var ChipSet = exports.ChipSet = (0, _Base.simpleTag)({
  displayName: 'ChipSet',
  classNames: function classNames(props) {
    return ['mdc-chip-set', {
      'mdc-chip-set--choice': props.choice,
      'mdc-chip-set--filter': props.filter
    }];
  },
  consumeProps: ['filter', 'choice']
});
