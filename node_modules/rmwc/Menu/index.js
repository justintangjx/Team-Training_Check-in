'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SimpleMenu = exports.Menu = exports.MenuAnchor = exports.MenuItem = exports.MenuItems = exports.MenuRoot = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _mdc = require('@material/menu/dist/mdc.menu');

var _List = require('../List');

var _Base = require('../Base');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/****************************************************************
 * Private
 ****************************************************************/
var MenuRoot = exports.MenuRoot = (0, _Base.simpleTag)({
  displayName: 'MenuRoot',
  classNames: function classNames(props) {
    return ['mdc-menu'];
  },
  defaultProps: {
    tabIndex: '-1'
  }
});

var MenuItems = exports.MenuItems = (0, _Base.simpleTag)({
  displayName: 'MenuItems',
  tag: _List.List,
  classNames: 'mdc-list mdc-menu__items',
  defaultProps: {
    "role": 'menu',
    'aria-hidden': 'true'
  }
});

/****************************************************************
 * Public
 ****************************************************************/

/** This is just the ListItem component exported from the Menu module for convience. */
var MenuItem = exports.MenuItem = function MenuItem(props) {
  return React.createElement(_List.ListItem, Object.assign({ role: 'menuitem', tabIndex: '0' }, props));
};

MenuItem.displayName = 'MenuItem';

/** A Menu Anchor. When using the anchorCorner prop of Menu, you must set MenuAnchors position to absolute. */
var MenuAnchor = exports.MenuAnchor = (0, _Base.simpleTag)({
  displayName: 'MenuAnchor',
  classNames: 'mdc-menu-anchor'
});

var ANCHOR_CORNER_MAP = {
  bottomEnd: 'BOTTOM_END',
  bottomeLeft: 'BOTTOM_LEFT',
  bottomRight: 'BOTTOM_RIGHT',
  bottomStart: 'BOTTOM_START',
  topEnd: 'TOP_END',
  topLeft: 'TOP_LEFT',
  topRight: 'TOP_RIGHT',
  topStart: 'TOP_START'
};

// prettier-ignore


var handleMenuChange = function handleMenuChange(evt, props) {
  evt.target.value = false;
  props.onClose(evt);
};

/** A menu component */
var Menu = (0, _Base.withMDC)({
  mdcConstructor: _mdc.MDCMenu,
  mdcElementRef: true,
  mdcEvents: {
    'MDCMenu:cancel': function MDCMenuCancel(evt, props, api) {
      handleMenuChange(evt, props);
    },
    'MDCMenu:selected': function MDCMenuSelected(evt, props, api) {
      handleMenuChange(evt, props);
      props.onSelected(evt);
    }
  },
  defaultProps: {
    open: false,
    onSelected: _Base.noop,
    onClose: _Base.noop
  },
  onMount: function onMount(props, api) {
    if (props.open) {
      api.quickOpen = true;
      api.open = true;
      api.quickOpen = false;
    }
  },
  onUpdate: function onUpdate(props, nextProps, api) {
    if (api && _mdc.MDCMenuFoundation.Corner[ANCHOR_CORNER_MAP[nextProps.anchorCorner]] !== api.foundation_.anchorCorner_) {
      api.setAnchorCorner(_mdc.MDCMenuFoundation.Corner[ANCHOR_CORNER_MAP[nextProps.anchorCorner]]);
    }

    if (api && nextProps.open !== undefined && api.open !== nextProps.open) {
      api.open = nextProps.open;
    }
  }
})((_temp = _class = function (_React$Component) {
  _inherits(_class, _React$Component);

  function _class() {
    _classCallCheck(this, _class);

    return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
  }

  _createClass(_class, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          open = _props.open,
          onClose = _props.onClose,
          onSelected = _props.onSelected,
          mdcElementRef = _props.mdcElementRef,
          anchorCorner = _props.anchorCorner,
          rest = _objectWithoutProperties(_props, ['children', 'open', 'onClose', 'onSelected', 'mdcElementRef', 'anchorCorner']);

      return React.createElement(
        MenuRoot,
        Object.assign({ elementRef: mdcElementRef }, rest),
        React.createElement(
          MenuItems,
          null,
          children
        )
      );
    }
  }]);

  return _class;
}(React.Component), Object.defineProperty(_class, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'Menu'
}), _temp));

exports.Menu = Menu;

/**
 * A Simplified menu component that allows you to pass a handle element and will automatically control the open state and add a MenuAnchor
 */
var SimpleMenu = exports.SimpleMenu = function (_React$Component2) {
  _inherits(SimpleMenu, _React$Component2);

  function SimpleMenu() {
    var _ref;

    var _temp2, _this2, _ret;

    _classCallCheck(this, SimpleMenu);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp2 = (_this2 = _possibleConstructorReturn(this, (_ref = SimpleMenu.__proto__ || Object.getPrototypeOf(SimpleMenu)).call.apply(_ref, [this].concat(args))), _this2), Object.defineProperty(_this2, 'state', {
      enumerable: true,
      writable: true,
      value: {
        open: false
      }
    }), _temp2), _possibleConstructorReturn(_this2, _ret);
  }

  _createClass(SimpleMenu, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.syncWithOpenProp(this.props.open);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.syncWithOpenProp(nextProps.open);
    }
  }, {
    key: 'syncWithOpenProp',
    value: function syncWithOpenProp(open) {
      if (open !== undefined && this.state.open !== open) {
        this.setState({ open: open });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props2 = this.props,
          handle = _props2.handle,
          onClose = _props2.onClose,
          children = _props2.children,
          _props2$rootProps = _props2.rootProps,
          rootProps = _props2$rootProps === undefined ? {} : _props2$rootProps,
          open = _props2.open,
          rest = _objectWithoutProperties(_props2, ['handle', 'onClose', 'children', 'rootProps', 'open']);

      var wrappedHandle = React.cloneElement(handle, Object.assign({}, handle.props, {
        onClick: function onClick(evt) {
          _this3.setState({ open: true });
          if (handle.props.onClick) {
            handle.props.onClick(evt);
          }
        }
      }));

      var wrappedOnClose = function wrappedOnClose(evt) {
        _this3.setState({ open: false });
        if (onClose) {
          onClose(evt);
        }
      };
      return React.createElement(
        MenuAnchor,
        rootProps,
        React.createElement(
          Menu,
          Object.assign({ onClose: wrappedOnClose, open: this.state.open }, rest),
          children
        ),
        wrappedHandle
      );
    }
  }]);

  return SimpleMenu;
}(React.Component);

Object.defineProperty(SimpleMenu, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'SimpleMenu'
});
