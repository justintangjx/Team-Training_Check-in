'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Drawer = exports.DrawerDrawer = exports.DrawerRoot = exports.DrawerContent = exports.DrawerToolbarSpacer = exports.DrawerHeader = exports.DrawerHeaderContent = exports.DrawerHeaderRoot = undefined;

var _class, _temp;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _Base = require('../Base');

var _List = require('../List');

var _mdc = require('@material/drawer/dist/mdc.drawer');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/***************************************************************************************
 * Drawer Headers
 ***************************************************************************************/
var DrawerHeaderRoot = exports.DrawerHeaderRoot = (0, _Base.simpleTag)({
  displayName: 'DrawerHeaderRoot',
  classNames: 'mdc-drawer__header'
});

var DrawerHeaderContent = exports.DrawerHeaderContent = (0, _Base.simpleTag)({
  displayName: 'DrawerHeaderContent',
  classNames: 'mdc-drawer__header-content'
});

/** A Header for Drawers */

var DrawerHeader = exports.DrawerHeader = function (_React$Component) {
  _inherits(DrawerHeader, _React$Component);

  function DrawerHeader() {
    _classCallCheck(this, DrawerHeader);

    return _possibleConstructorReturn(this, (DrawerHeader.__proto__ || Object.getPrototypeOf(DrawerHeader)).apply(this, arguments));
  }

  _createClass(DrawerHeader, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          rest = _objectWithoutProperties(_props, ['children']);

      return React.createElement(
        DrawerHeaderRoot,
        rest,
        React.createElement(
          DrawerHeaderContent,
          null,
          children
        )
      );
    }
  }]);

  return DrawerHeader;
}(React.Component);

/** If you are using fixed a Toolbar, this provides space for it. */


var DrawerToolbarSpacer = exports.DrawerToolbarSpacer = (0, _Base.simpleTag)({
  displayName: 'DrawerToolbarSpacer',
  classNames: 'mdc-drawer__toolbar-spacer'
});

/***************************************************************************************
 * Drawer Content
 ***************************************************************************************/
/** Content for Drawers. Please note this is an instance of mdc-list by default. You can change this to a a non list container by specifying the tag as 'div' or anything else. */
var DrawerContent = exports.DrawerContent = (0, _Base.simpleTag)({
  displayName: 'DrawerContent',
  tag: _List.List,
  classNames: 'mdc-drawer__content'
});

/***************************************************************************************
 * Drawers
 ***************************************************************************************/
var DrawerRoot = exports.DrawerRoot = (0, _Base.simpleTag)({
  displayName: 'DrawerRoot',
  tag: 'aside',
  classNames: function classNames(props) {
    return ['mdc-drawer', {
      'mdc-drawer--permanent': props.permanent,
      'mdc-drawer--persistent': props.persistent,
      'mdc-drawer--temporary': props.temporary
    }];
  },
  consumeProps: ['permanent', 'persistent', 'temporary']
});

var DrawerDrawer = exports.DrawerDrawer = (0, _Base.simpleTag)({
  displayName: 'DrawerDrawer',
  tag: 'nav',
  classNames: 'mdc-drawer__drawer'
});

/** A Drawer component */
var Drawer = (0, _Base.withMDC)({
  getMdcConstructorOrInstance: function getMdcConstructorOrInstance(props) {
    if (props.temporary) {
      return _mdc.MDCTemporaryDrawer;
    } else if (props.persistent) {
      return _mdc.MDCPersistentDrawer;
    }

    return null;
  },
  defaultProps: {
    open: false,
    onOpen: _Base.noop,
    onClose: _Base.noop,
    permanent: false,
    persistent: false,
    temporary: false
  },
  mdcElementRef: true,
  mdcEvents: function mdcEvents(props) {
    var _ref;

    var drawerConstructorName = void 0;

    if (props.temporary) {
      drawerConstructorName = 'MDCTemporaryDrawer';
    } else if (props.persistent) {
      drawerConstructorName = 'MDCPersistentDrawer';
    } else {
      // we dont have a valid event namespace, escape out
      return {};
    }

    return _ref = {}, _defineProperty(_ref, drawerConstructorName + ':open', function undefined(evt, props) {
      return props.onOpen(evt);
    }), _defineProperty(_ref, drawerConstructorName + ':close', function undefined(evt, props) {
      return props.onClose(evt);
    }), _ref;
  },
  onUpdate: function onUpdate(props, nextProps, api, inst) {
    if (props && ['permanent', 'persistent', 'temporary'].some(function (p) {
      return props[p] !== nextProps[p];
    })) {
      inst.mdcComponentDestroy();
      return;
    }

    if (api && api.open !== !!nextProps.open) {
      api.open = !!nextProps.open;
    }
  },
  didUpdate: function didUpdate(props, nextProps, api, inst) {
    if (props && ['permanent', 'persistent', 'temporary'].some(function (p) {
      return props[p] !== nextProps[p];
    })) {
      inst.mdcComponentInit();
      return;
    }
  }
})((_temp = _class = function (_React$Component2) {
  _inherits(_class, _React$Component2);

  function _class() {
    _classCallCheck(this, _class);

    return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
  }

  _createClass(_class, [{
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          children = _props2.children,
          onOpen = _props2.onOpen,
          onClose = _props2.onClose,
          mdcElementRef = _props2.mdcElementRef,
          rest = _objectWithoutProperties(_props2, ['children', 'onOpen', 'onClose', 'mdcElementRef']);

      return React.createElement(
        DrawerRoot,
        Object.assign({ elementRef: mdcElementRef }, rest),
        rest.permanent ? children : React.createElement(
          DrawerDrawer,
          null,
          children
        )
      );
    }
  }]);

  return _class;
}(React.Component), Object.defineProperty(_class, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'Drawer'
}), _temp));
exports.Drawer = Drawer;
