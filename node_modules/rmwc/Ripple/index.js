'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Ripple = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _mdc = require('@material/ripple/dist/mdc.ripple');

var _MDCFoundation = require('../Base/MDCFoundation');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Ripple = exports.Ripple = function (_withFoundation) {
  _inherits(Ripple, _withFoundation);

  function Ripple() {
    _classCallCheck(this, Ripple);

    return _possibleConstructorReturn(this, (Ripple.__proto__ || Object.getPrototypeOf(Ripple)).apply(this, arguments));
  }

  _createClass(Ripple, [{
    key: 'syncWithProps',
    value: function syncWithProps(nextProps) {
      var _this2 = this;

      // unbounded
      (0, _MDCFoundation.syncFoundationProp)(nextProps.unbounded, this.unbounded, function () {
        return _this2.unbounded = nextProps.unbounded;
      });

      //disabled
      (0, _MDCFoundation.syncFoundationProp)(nextProps.disabled, this.disabled, function () {
        return _this2.disabled = nextProps.disabled;
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          className = _props.className,
          primary = _props.primary,
          accent = _props.accent,
          unbounded = _props.unbounded,
          surface = _props.surface,
          apiRef = _props.apiRef,
          rest = _objectWithoutProperties(_props, ['children', 'className', 'primary', 'accent', 'unbounded', 'surface', 'apiRef']);

      var root_ = this.foundationRefs.root_;


      var child = React.Children.only(children);

      // a little tricky... We only want to pass a ref if we are dealing with a dom element, aka div, p, aside
      // Otherwise we have a class, and we want to pass elementRef down the chain.
      var refProp = _defineProperty({}, typeof child.type !== 'string' ? 'elementRef' : 'ref', root_);

      var unboundedProp = unbounded ? { 'data-mdc-ripple-is-unbounded': true } : {};

      return React.cloneElement(child, Object.assign({}, child.props, rest, refProp, unboundedProp, {
        className: (0, _classnames2.default)(className, child.props.className, [].concat(_toConsumableArray(this.state.classes)), {
          'mdc-ripple-surface': surface !== undefined ? surface : true,
          'mdc-ripple-surface--primary': primary,
          'mdc-ripple-surface--accent': accent
        })
      }));
    }
  }]);

  return Ripple;
}((0, _MDCFoundation.withFoundation)({
  constructor: _mdc.MDCRipple,
  adapter: {
    addClass: (0, _MDCFoundation.addClass)(),
    removeClass: (0, _MDCFoundation.removeClass)()
  }
}));

Object.defineProperty(Ripple, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'Ripple'
});
exports.default = Ripple;
