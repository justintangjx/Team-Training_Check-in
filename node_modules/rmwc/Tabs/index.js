'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TabBarScroller = exports.TabBar = exports.TabIconText = exports.TabIcon = exports.Tab = exports.TabBarScrollerScrollFrame = exports.TabBarScrollerIndicatorInner = exports.TabBarScrollerIndicator = exports.TabBarScrollerRoot = exports.TabBarIndicator = exports.TabBarRoot = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp, _class2, _temp2;

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _mdc = require('@material/tabs/dist/mdc.tabs');

var _Icon = require('../Icon');

var _Base = require('../Base');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/******************************************************
 * Private
 *******************************************************/
var TabBarRoot = exports.TabBarRoot = (0, _Base.simpleTag)({
  displayName: 'TabBarRoot',
  tag: 'nav',
  classNames: function classNames(props) {
    return ['mdc-tab-bar', {
      'mdc-tab-bar-scroller__scroll-frame__tabs': props.isTabScroller
    }];
  },
  consumeProps: ['isTabScroller']
});

var TabBarIndicator = exports.TabBarIndicator = (0, _Base.simpleTag)({
  displayName: 'TabBarIndicator',
  tag: 'span',
  classNames: 'mdc-tab-bar__indicator'
});

var TabBarScrollerRoot = exports.TabBarScrollerRoot = (0, _Base.simpleTag)({
  displayName: 'TabBarScrollerRoot',
  tag: 'div',
  classNames: 'mdc-tab-bar-scroller'
});

var TabBarScrollerIndicator = exports.TabBarScrollerIndicator = (0, _Base.simpleTag)({
  displayName: 'TabBarScrollerIndicatorBack',
  tag: 'div',
  classNames: function classNames(props) {
    return ['mdc-tab-bar-scroller__indicator', {
      'mdc-tab-bar-scroller__indicator--back': props.back,
      'mdc-tab-bar-scroller__indicator--forward': props.forward
    }];
  },
  consumeProps: ['forward', 'back']
});

var TabBarScrollerIndicatorInner = exports.TabBarScrollerIndicatorInner = (0, _Base.simpleTag)({
  displayName: 'TabBarScrollerIndicatorInner',
  tag: _Icon.Icon,
  classNames: 'mdc-tab-bar-scroller__indicator__inner'
});

var TabBarScrollerScrollFrame = exports.TabBarScrollerScrollFrame = (0, _Base.simpleTag)({
  displayName: 'TabBarScrollerScrollFrameEl',
  tag: 'div',
  classNames: 'mdc-tab-bar-scroller__scroll-frame'
});

/******************************************************
 * Public
 *******************************************************/

/** A Tab component */
var Tab = exports.Tab = (0, _Base.simpleTag)({
  displayName: 'Tab',
  classNames: 'mdc-tab'
});

/** A Tab icon. This is an instance of the Icon component. */
var TabIcon = exports.TabIcon = (0, _Base.simpleTag)({
  displayName: 'TabIcon',
  tag: _Icon.Icon,
  classNames: 'mdc-tab__icon'
});

/** Text that goes under a Tab icon */
var TabIconText = exports.TabIconText = (0, _Base.simpleTag)({
  displayName: 'TabIconText',
  tag: 'span',
  classNames: 'mdc-tab__icon-text'
});

/** The TabBar component */
var TabBar = (0, _Base.withMDC)({
  getMdcConstructorOrInstance: function getMdcConstructorOrInstance(props, context) {
    // TabBarScroller handles the TabBar instantiation for us
    // if we double instantiate, we end up with errors.
    // Here we are seeing if TabBarScroller passed us the api instance
    // via context
    if (context && context.isTabScroller) {
      return context.tabBarApi;
    }

    return _mdc.MDCTabBar;
  },
  mdcEvents: {
    'MDCTabBar:change': function MDCTabBarChange(evt, props, api) {
      evt.target.value = api.activeTabIndex;
      props.onChange(evt);
    }
  },
  contextTypes: {
    isTabScroller: _propTypes2.default.bool,
    tabBarApi: _propTypes2.default.any,
    reinitTabBarScroller: _propTypes2.default.func
  },
  defaultProps: {
    onChange: _Base.noop,
    activeTabIndex: 0
  },
  onUpdate: function onUpdate(props, nextProps, api, inst) {
    if (!api) return;

    if (!props || nextProps.activeTabIndex !== props.activeTabIndex) {
      api.activeTabIndex = api.tabs[Number(nextProps.activeTabIndex)] ? nextProps.activeTabIndex + '' : undefined;
    }
  },
  didUpdate: function didUpdate(props, nextProps, api, inst) {
    if (inst.context.tabBarApi && api !== inst.context.tabBarApi) {
      // if we dont have an api, it might be being held hostage by the TabBar scroller
      // Grab it if its available from the context and re-init the component
      inst.mdcComponentReinit();
      return;
    }

    // exit if we have no api
    if (!api) return;

    var childrenDidChange = props && props.children && nextProps && nextProps.children && JSON.stringify(React.Children.map(props.children, function (_ref) {
      var key = _ref.key;
      return key;
    })) !== JSON.stringify(React.Children.map(nextProps.children, function (_ref2) {
      var key = _ref2.key;
      return key;
    }));

    var tabsLengthMismatch = React.Children.toArray(nextProps.children).length !== api.tabs.length;

    // Children changing is a pain...
    // We have to perform a lot of cleanup and sometimes we have to reinit
    // A parent tab bar scroller
    if (childrenDidChange || tabsLengthMismatch) {
      // destroy the foundation for all tabs manually to remove all  listeners
      if (api.tabs) {
        api.tabs.forEach(function (mdcTab) {
          mdcTab.foundation_ && mdcTab.foundation_.destroy();
        });
      }
      // when tab scroller is wrapping the component
      if (inst.context.isTabScroller) {
        // destroy the foundation
        inst.mdcComponentDestroy();
        // trigger reinit on the scroller container
        inst.context.reinitTabBarScroller();
      } else {
        // reinit
        inst.mdcComponentReinit();
      }
    }
  }
})((_temp = _class = function (_React$Component) {
  _inherits(_class, _React$Component);

  function _class() {
    _classCallCheck(this, _class);

    return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
  }

  _createClass(_class, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          activeTabIndex = _props.activeTabIndex,
          rest = _objectWithoutProperties(_props, ['children', 'activeTabIndex']);

      return React.createElement(
        TabBarRoot,
        Object.assign({ isTabScroller: this.context.isTabScroller }, rest),
        children,
        React.createElement(TabBarIndicator, null)
      );
    }
  }]);

  return _class;
}(React.Component), Object.defineProperty(_class, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'TabBar'
}), Object.defineProperty(_class, 'contextTypes', {
  enumerable: true,
  writable: true,
  value: {
    isTabScroller: _propTypes2.default.bool
  }
}), _temp));

exports.TabBar = TabBar;


/** The TabBar Scroll container */
var TabBarScroller = (0, _Base.withMDC)({
  mdcConstructor: _mdc.MDCTabBarScroller,
  mdcApiRef: true,
  mdcComponentReinit: true,
  onUpdate: function onUpdate(currentProps, nextProps, api, inst) {
    // componentWillReceiveProps is not called
    // when the component is first mounted.
    // We need to force react to call getChildContext
    // after the api becomes available.

    // invoked from mdcComponentInit currentProps is undefined
    if (currentProps === undefined) {
      // trigger an update
      inst.setState({}); // or inst.forceUpdate()
    }
  }
})((_temp2 = _class2 = function (_React$Component2) {
  _inherits(_class2, _React$Component2);

  function _class2() {
    _classCallCheck(this, _class2);

    return _possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).apply(this, arguments));
  }

  _createClass(_class2, [{
    key: 'getChildContext',


    /**
     * The tab bar scroller inits the tabBar for us
     * We have to jump through some context hoops to get the tabBar api instance back to the TabBar
     * mdcApiRef.tabBar is passed directly through props to the context
     */
    value: function getChildContext() {
      var _this3 = this;

      return {
        isTabScroller: true,
        tabBarApi: this.props && this.props.mdcApiRef && this.props.mdcApiRef.tabBar,
        reinitTabBarScroller: function reinitTabBarScroller() {
          return _this3.reinitTabBarScroller();
        }
      };
    }
  }, {
    key: 'reinitTabBarScroller',
    value: function reinitTabBarScroller() {
      this.props.mdcComponentReinit();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          children = _props2.children,
          mdcComponentReinit = _props2.mdcComponentReinit,
          indicatorForward = _props2.indicatorForward,
          indicatorBack = _props2.indicatorBack,
          mdcApiRef = _props2.mdcApiRef,
          rest = _objectWithoutProperties(_props2, ['children', 'mdcComponentReinit', 'indicatorForward', 'indicatorBack', 'mdcApiRef']);

      return React.createElement(
        TabBarScrollerRoot,
        rest,
        React.createElement(
          TabBarScrollerIndicator,
          { back: true },
          React.createElement(TabBarScrollerIndicatorInner, { use: indicatorBack })
        ),
        React.createElement(
          TabBarScrollerScrollFrame,
          null,
          children
        ),
        React.createElement(
          TabBarScrollerIndicator,
          { forward: true },
          React.createElement(TabBarScrollerIndicatorInner, { use: indicatorForward })
        )
      );
    }
  }]);

  return _class2;
}(React.Component), Object.defineProperty(_class2, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'TabBarScroller'
}), Object.defineProperty(_class2, 'defaultProps', {
  enumerable: true,
  writable: true,
  value: {
    indicatorForward: React.createElement(
      'svg',
      {
        style: { fill: 'currentColor' },
        height: '24',
        viewBox: '0 0 24 24',
        width: '24'
      },
      React.createElement('path', { d: 'M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z' }),
      React.createElement('path', { d: 'M0 0h24v24H0z', fill: 'none' })
    ),
    indicatorBack: React.createElement(
      'svg',
      {
        style: { fill: 'currentColor' },
        height: '24',
        viewBox: '0 0 24 24',
        width: '24'
      },
      React.createElement('path', { d: 'M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z' }),
      React.createElement('path', { d: 'M0 0h24v24H0z', fill: 'none' })
    )
  }
}), Object.defineProperty(_class2, 'childContextTypes', {
  enumerable: true,
  writable: true,
  value: {
    isTabScroller: _propTypes2.default.bool,
    tabBarApi: _propTypes2.default.any,
    reinitTabBarScroller: _propTypes2.default.func
  }
}), _temp2));
exports.TabBarScroller = TabBarScroller;
